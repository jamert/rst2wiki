#!/usr/bin/env python
# coding=utf-8
import os
import json
from pprint import pformat

import click
# dirty hack for locale bug (for docutils)
os.environ['LC_CTYPE'] = 'en_US.UTF8'
from docutils.core import publish_string
from rst2confluence import confluence
import requests
import requests.packages.urllib3
requests.packages.urllib3.disable_warnings()


def config_data(config):
    if not os.path.exists(config):
        return make_config(config)

    with open(config) as f:
        data = json.load(f)
    return data['url'], (data['user'], data['password'])


def make_config(default_path):
    path = click.prompt(
        'Configuration file location',
        type=click.Path(dir_okay=False, writable=True, resolve_path=True),
        default=default_path)
    url = click.prompt('Confluence URL', type=click.STRING)
    user = click.prompt('Confluence login', type=click.STRING)
    password = click.prompt(
        'Confluence password',
        type=click.STRING,
        hide_input=True)

    with open(path, 'w') as f:
        json.dump(
            {'url': url,
             'user': user,
             'password': password}, f)
    click.echo('Wrote configuration to {}'.format(path))

    return url, (user, password)


def generate_content(filename):
    click.echo('Preparing content...')
    with open(filename) as f:
        rst = f.read()
    content = publish_string(rst, writer=confluence.Writer())

    autogenerated_docs_tip = "{note:title=Автогенерируемая документация}\n" \
                             "Эта страница обновляется из файлов документации " \
                             "в пакете программного продукта.\n" \
                             "Учтите, что изменения, внесённые в страницу, могут быть " \
                             "перезаписаны при следующем обновлении документации.\n" \
                             "Автор страницы получит письмо об изменении страницы и, возможно, " \
                             "внесёт изменения в файлы документации.\n" \
                             "{note}\n"

    return autogenerated_docs_tip + content


def page_url(hostname, page_id):
    return hostname.rstrip('/') + '/rest/api/content/{}'.format(page_id)


def fetch_page(page_id, hostname, auth):
    click.echo('Fetching page {}...'.format(page_id))
    url = page_url(hostname, page_id)
    response = requests.get(url, auth=auth)
    response.raise_for_status()
    return response.json()


def push_page(meta, hostname, auth):
    page_id = meta['id']
    click.echo('Writing to Confluence...')
    response = requests.put(
        page_url(hostname, page_id),
        auth=auth,
        headers={'Content-Type': 'application/json'},
        data=json.dumps(meta))
    response.raise_for_status()
    click.echo('Page {} successfully updated'.format(page_id))


def prepare_for_sending(content, page, ancestor_page=None):
    meta = {
        'id': page['id'],
        'type': 'page',
        'title': page['title'],
        'space': {'key': page['space']['key']},
        'version': {'number': page['version']['number'] + 1},
        'body': {'wiki': {'value': content,
                          'representation': 'wiki'}}
    }

    if ancestor_page:
        meta['ancestors'] = [{'type': 'page', 'id': ancestor_page['id']}]

        if meta['space']['key'] != ancestor_page['space']['key']:
            raise click.ClickException(
                "Your ancestor page belongs to another space ({} <> {}).\n"
                "Because it is currently not possible to change "
                "page's space\nthrough Confluence REST API, "
                "you'll need to do it manually."
                .format(meta['space']['key'],
                        ancestor_page['space']['key']))

    return meta


def publish_content(content, page_id, ancestor_id=None, config=None):
    hostname, auth = config_data(config)

    try:
        page = fetch_page(page_id, hostname, auth)
        if ancestor_id:
            ancestor_page = fetch_page(ancestor_id, hostname, auth)
        else:
            ancestor_page = None

        meta = prepare_for_sending(content, page, ancestor_page)

        push_page(meta, hostname, auth)
    except requests.ConnectionError:
        raise click.ClickException(
            'Could not connect to hostname {}'.format(hostname))
    except requests.RequestException as e:
        click.echo('Something went wrong, analyze response from server:')
        if e.response.headers.get('Content-Type') == 'application/json':
            click.echo(pformat(e.response.json()))
        else:
            click.echo(pformat(e.response.text))
        raise click.Abort()


def required(ctx, param, value):
    if value is None:
        raise click.BadParameter('option is required')
    else:
        return value


@click.command()
@click.argument('source', type=click.Path(exists=True, dir_okay=False))
@click.option('-p', '--page', type=click.INT,
              callback=required,
              help='Page id in Confluence')
@click.option('-a', '--ancestor', type=click.INT,
              help='Ancestor page id in Confluence')
@click.option('-c', '--config',
              type=click.Path(resolve_path=True),
              default=click.get_app_dir('rst2wiki', force_posix=True),
              help='Configuration file')
@click.version_option()
def main(source, page, ancestor, config):
    """
    Tool converts SOURCE file in reStructuredText format to confluence
    wiki format and pushes it in Confluence instance
    """
    content = generate_content(source)
    publish_content(content, page, ancestor, config)


if __name__ == '__main__':
    main()
